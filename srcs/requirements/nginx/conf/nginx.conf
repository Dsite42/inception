user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	# if not found in the MIME types, don't render it and start a binary download
	default_type application/octet-stream;
	
	server {
		# IPv4
		listen		443 ssl;
		# IPv6
		listen		[::]:443 ssl;

		#allow		0.0.0.0/0;
		server_name	DOMAIN_NAME;
		root		/var/www/wordpress;
		index		index.php;
		
		ssl_certificate		CERTS/nginx.crt;
		ssl_certificate_key	CERTS/nginx.key;
		ssl_protocols		TLSv1.3;
		
		location / {
			# Checks if a file or directory exists at the requested URI, or returns a 404 error if not found.
			try_files	$uri $uri/ = 404;
		}
		
		# pass PHP scripts on Nginx to FastCGI (PHP-FPM) server
		location ~ \.php$
		{
			# Checks if the requested PHP file exists. If it does not, Nginx returns a 404 error without trying to pass the request to PHP-FPM
			try_files		$uri =404;
			# This regex separates the actual PHP file from the path info, which follows the PHP file in the URL.
			# This is useful for scripts that use 'pretty URLs' or need to process requests dynamically.
			fastcgi_split_path_info ^(.+\.php)(/.+)$;
			# Directs the handling of the PHP request to the PHP-FPM service
			fastcgi_pass	wordpress:9000;
			fastcgi_index	index.php;
			# Includes additional configuration settings that define how Nginx should interact with the FastCGI server.
			include			/etc/nginx/fastcgi.conf;
			include			fastcgi_params;
			fastcgi_param	SCRIPT_FILENAME $document_root$fastcgi_script_name;
 		}
	}

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

	# Don't tell nginx version to the clients. (security reason) Default is 'on'.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable. Default is '1m'.
	client_max_body_size 1m;

	# Sendfile() copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write().
	# (It allows the web server to deliver static files more efficiently) Default is off.
	sendfile on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames. Nginx can make better use of the network's bandwidth.
	# This reduces the overhead introduced by TCP and IP headers in smaller packets. Default is 'off'.
	tcp_nopush on;


	# Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
	# TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
	ssl_protocols TLSv1.3;

	# Path of the file with Diffie-Hellman parameters for EDH ciphers. The default DH parameters from OpenSSL are used.
	# TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# Specifies that the server cipher suits should be preferred over client ciphers. (Ciphers are algorithms used to perform encryption or decryption)
	# Default is 'off'.
	ssl_prefer_server_ciphers on;

	# Enables a shared SSL cache with size that can hold around 8000 sessions.
	# Default is 'none'.
	ssl_session_cache shared:SSL:2m;

	# Specifies a time during which a client may reuse the session parameters. (speed up)
	# Default is '5m'.
	ssl_session_timeout 1h;

	# Disable TLS session tickets (they are insecure). Default is 'on'. (By default, SSL session
	# tickets can be enabled to allow clients to reuse previously negotiated session parameters
	# without needing a full handshake)
	ssl_session_tickets off;


	# Enable gzipping of responses. Default is off
	gzip off;

	# Set the Vary HTTP header as defined in the RFC 2616. 
	# (Ensures that clients receive content in an encoding they support.) Default is 'off'.
	gzip_vary off;


	# Helper variable for proxying websockets. (It ensures that WebSocket upgrade requests are appropriately forwarded. real-time)
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}


	# Specifies the main log format.
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	# Sets the path, format, and configuration for a buffered log write.
	access_log /var/log/nginx/access.log main;


	# Includes virtual hosts configs.
	include /etc/nginx/http.d/*.conf;
}
